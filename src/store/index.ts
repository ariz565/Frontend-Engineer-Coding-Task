import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { configureStore } from "@reduxjs/toolkit";
import { combineReducers } from "redux";
import { showToastMessage } from "../utils/helpers";

// Define the Contact interface
export interface Contact {
  id: string;
  firstName: string;
  lastName: string;
  status: string;
}

// Define the state interface for the contacts
interface ContactState {
  items: Contact[];
}

// Set the initial state with an empty list of contacts
const initialState: ContactState = {
  items: [],
};

// create a slice for contacts with actions and reducers
const contactSlice = createSlice({
  name: "contacts",
  initialState,
  reducers: {
    // Action to add a contact
    addContact: (state, action: PayloadAction<Contact>) => {
      state.items.push(action.payload);
      showToastMessage("Contact created.", "success");
      // Update local storage
      localStorage.setItem("contacts", JSON.stringify(state.items));
    },
    // Action to remove a contact by ID
    removeContact: (state, action: PayloadAction<number>) => {
      state.items = state.items.filter(
        (contact) => contact.id !== String(action.payload)
      );
      showToastMessage("Contact deleted.", "error");
      // Update local storage
      localStorage.setItem("contacts", JSON.stringify(state.items));
    },
    // Action to update an existing contact
    updateContact: (state, action: PayloadAction<Contact>) => {
      const index = state.items.findIndex(
        (contact) => contact.id === action.payload.id
      );
      // find the index of the contact to update
      if (index !== -1) {
        state.items[index] = action.payload;
      }
      showToastMessage("Contact details updated.", "success");
      // Update local storage
      localStorage.setItem("contacts", JSON.stringify(state.items));
    },
  },
});

// Export the actions generated by createSlice
export const { addContact, removeContact, updateContact } =
  contactSlice.actions;

// combine reducers
const rootReducer = combineReducers({
  contacts: contactSlice.reducer,
});

// Load contacts from local storage if available
const storedContacts = localStorage.getItem("contacts");
const preloadedState = storedContacts
  ? { contacts: { items: JSON.parse(storedContacts) } }
  : {};

// Configure the Redux store with the rootReducer and preloadedState
export const store = configureStore({
  reducer: rootReducer,
  preloadedState: preloadedState,
});
